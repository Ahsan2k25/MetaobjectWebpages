<div class="configurator-landing">
  {% assign current_metaobject = metaobject %}
  
  <div class="configurator-collection">
    <h2>{{ current_metaobject.collection_name }}</h2>
    
    {% comment %} {% if current_metaobject.collection_image %}
      <div class="collection-image">
        <img src="{{ current_metaobject.collection_image | image_url }}" alt="{{ current_metaobject.collection_name }}">
      </div>
    {% endif %} {% endcomment %}
    
    {% comment %} {% if current_metaobject.configure_button_text %}
      <div class="collection-button">
        <a href="{{ current_metaobject.configure_button_url }}" class="btn">
          {{ current_metaobject.configure_button_text }}
        </a>
      </div>
    {% endif %} {% endcomment %}
    
    <div class="nested-collections" id="nested-collections">
      <div class="loading">Loading nested collections...</div>
    </div>
  </div>
</div>

<style>
  .configurator-landing {
    padding: 2rem 0;
    max-width: 1200px;
    margin: 0 auto;
  }
  
  .btn {
    display: inline-block;
    padding: 0.75rem 1.5rem;
    background-color: #4a4a4a;
    color: white;
    text-decoration: none;
    border-radius: 4px;
    transition: background-color 0.3s ease;
  }
  
  .btn:hover {
    background-color: #2a2a2a;
  }
  
  .nested-collections {
    margin-top: 2rem;
  }
  
  .nested-collection {
    margin-bottom: 3rem;
    padding: 1.5rem;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
  }
  
  .collection-subtitle {
    color: #666;
    margin-top: 0.25rem;
    margin-bottom: 1.5rem;
    font-size: 1.1rem;
  }
  
  .product-cards {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1.5rem;
    margin-top: 1rem;
  }
  
  .product-card {
    border: 1px solid #e5e5e5;
    border-radius: 8px;
    padding: 1.5rem;
    transition: box-shadow 0.3s ease;
    background-color: white;
  }
  
  .product-card:hover {
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
  }
  
  .product-image {
    margin-bottom: 1rem;
  }
  
  .product-image img {
    width: 100%;
    height: 200px;
    object-fit: cover;
    border-radius: 4px;
  }
  
  .product-title {
    font-size: 1.2rem;
    margin-bottom: 0.5rem;
  }
  
  .product-button {
    margin-top: 1rem;
  }
  
  .loading {
    padding: 2rem;
    text-align: center;
    background-color: #f8f8f8;
    border-radius: 8px;
  }
  
  .error {
    padding: 1rem;
    margin: 1rem 0;
    background-color: #fff0f0;
    border: 1px solid #ffcccc;
    border-radius: 4px;
    color: #cc0000;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Use the exact GIDs we found from the debug output
    const nestedCollectionIds = [
      "gid://shopify/Metaobject/216643928338",
      "gid://shopify/Metaobject/216643961106"
    ];
    
    const nestedContainer = document.getElementById('nested-collections');
    
    // Storefront API Configuration
    const storefrontApiToken = 'c728f2cb977d44d8991f690f5ef1d3f3';
    const shopDomain = window.location.hostname;
    const storefrontApiUrl = `https://${shopDomain}/api/2023-01/graphql.json`;
    
    // Function to fetch metaobjects using the Storefront API
    async function fetchNestedCollections() {
      // Query to get nested collections and their product card references
      const query = `
        {
          nodes(ids: ${JSON.stringify(nestedCollectionIds)}) {
            ... on Metaobject {
              id
              handle
              type
              fields {
                key
                value
              }
            }
          }
        }
      `;
      
      try {
        const response = await fetch(storefrontApiUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-Shopify-Storefront-Access-Token': storefrontApiToken
          },
          body: JSON.stringify({ query })
        });
        
        if (!response.ok) {
          throw new Error(`API response: ${response.status} ${response.statusText}`);
        }
        
        const data = await response.json();
        
        if (data.errors) {
          throw new Error(data.errors.map(e => e.message).join(', '));
        }
        
        return data.data?.nodes || [];
      } catch (error) {
        console.error('Error fetching nested collections:', error);
        throw error;
      }
    }
    
    // Function to fetch product cards by their IDs
    async function fetchProductCards(productCardIds) {
      if (!productCardIds || productCardIds.length === 0) {
        return [];
      }
      
      // Clean up the IDs - they're likely in a JSON string format
      const cleanIds = productCardIds.map(id => {
        if (typeof id === 'string') {
          // If it's already a GID, use it as is
          if (id.startsWith('gid://')) {
            return id;
          }
          // Otherwise, it might be a numeric ID that needs to be converted to a GID
          return `gid://shopify/Metaobject/${id}`;
        }
        return null;
      }).filter(Boolean);
      
      if (cleanIds.length === 0) {
        return [];
      }
      
      // Query to get product cards
      const query = `
        {
          nodes(ids: ${JSON.stringify(cleanIds)}) {
            ... on Metaobject {
              id
              handle
              type
              fields {
                key
                value
              }
            }
          }
        }
      `;
      
      try {
        const response = await fetch(storefrontApiUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-Shopify-Storefront-Access-Token': storefrontApiToken
          },
          body: JSON.stringify({ query })
        });
        
        if (!response.ok) {
          throw new Error(`API response: ${response.status} ${response.statusText}`);
        }
        
        const data = await response.json();
        
        if (data.errors) {
          throw new Error(data.errors.map(e => e.message).join(', '));
        }
        
        return data.data?.nodes || [];
      } catch (error) {
        console.error('Error fetching product cards:', error);
        return [];
      }
    }
    
    // Function to process metaobject fields
    function processMetaobjectFields(metaobject) {
      if (!metaobject || !metaobject.fields) {
        return {};
      }
      
      const fields = {};
      
      metaobject.fields.forEach(field => {
        if (field.key) {
          fields[field.key] = field.value;
        }
      });
      
      return fields;
    }
    
    // Extract product card IDs from a nested collection
    function extractProductCardIds(nestedCollection) {
      const fields = processMetaobjectFields(nestedCollection);
      
      if (!fields.product_cards) {
        return [];
      }
      
      // Try to parse the product_cards value as JSON
      try {
        const productCards = JSON.parse(fields.product_cards);
        return Array.isArray(productCards) ? productCards : [];
      } catch (e) {
        console.error('Error parsing product cards:', e);
        return [];
      }
    }
    
    // Main function to load data
    async function loadNestedCollections() {
      try {
        // Show loading state
        nestedContainer.innerHTML = '<div class="loading">Loading collections...</div>';
        
        // Fetch the nested collections
        const nestedCollections = await fetchNestedCollections();
        
        if (!nestedCollections || nestedCollections.length === 0) {
          nestedContainer.innerHTML = '<p>No nested collections found.</p>';
          return;
        }
        
        console.log('Fetched nested collections:', nestedCollections);
        
        let collectionsHtml = '';
        
        // Process each nested collection
        for (const nestedCollection of nestedCollections) {
          const fields = processMetaobjectFields(nestedCollection);
          console.log('Nested collection fields:', fields);
          
          // Start building the HTML for this collection
          let collectionHtml = `
            <div class="nested-collection">
              <h3>${fields.collection_name || 'Nested Collection'}</h3>
              ${fields.collection_display_name ? 
                `<div class="collection-subtitle">${fields.collection_display_name}</div>` : ''}
          `;
          
          // Extract product card IDs
          const productCardIds = extractProductCardIds(nestedCollection);
          console.log('Product card IDs:', productCardIds);
          
          // Fetch the product cards
          const productCards = await fetchProductCards(productCardIds);
          console.log('Fetched product cards:', productCards);
          
          // Add product cards section
          collectionHtml += '<div class="product-cards">';
          
          if (productCards && productCards.length > 0) {
            // Process each product card
            for (const productCard of productCards) {
              const cardFields = processMetaobjectFields(productCard);
              console.log('Product card fields:', cardFields);
              
              collectionHtml += `
                <div class="product-card">
                  <div class="product-image">
                    <img src="${cardFields.product_image ? cardFields.product_image : 'https://via.placeholder.com/300x200'}" 
                         alt="${cardFields.product_name || 'Product'}">
                  </div>
                  <h4 class="product-title">${cardFields.product_name || 'Product'}</h4>
                  ${cardFields.configure_button_text ? 
                    `<div class="product-button">
                      <a href="${cardFields.configure_button_url || '#'}" class="btn">
                        ${cardFields.configure_button_text}
                      </a>
                    </div>` : ''}
                </div>
              `;
            }
          } else {
            // If no product cards were found, show placeholders
            collectionHtml += `
              <div class="product-card">
                <div class="product-image">
                  <img src="https://via.placeholder.com/300x200" alt="Product">
                </div>
                <h4 class="product-title">Product from ${nestedCollection.handle || 'Collection'}</h4>
                <div class="product-button">
                  <a href="#" class="btn">Configure</a>
                </div>
              </div>
              <div class="product-card">
                <div class="product-image">
                  <img src="https://via.placeholder.com/300x200" alt="Product">
                </div>
                <h4 class="product-title">Another Product</h4>
                <div class="product-button">
                  <a href="#" class="btn">Configure</a>
                </div>
              </div>
            `;
          }
          
          collectionHtml += '</div></div>';
          collectionsHtml += collectionHtml;
        }
        
        nestedContainer.innerHTML = collectionsHtml;
      } catch (error) {
        console.error('Error:', error);
        
        // Show error and fall back to the hardcoded approach
        nestedContainer.innerHTML = `
          <div class="error">
            <p>Error loading collections: ${error.message}</p>
          </div>
          
          <div class="nested-collection">
            <h3>Nested Collection 1</h3>
            <div class="product-cards">
              <div class="product-card">
                <div class="product-image">
                  <img src="https://via.placeholder.com/300x200" alt="Product 1">
                </div>
                <h4 class="product-title">Product 1</h4>
                <div class="product-button">
                  <a href="#" class="btn">Configure</a>
                </div>
              </div>
              <div class="product-card">
                <div class="product-image">
                  <img src="https://via.placeholder.com/300x200" alt="Product 2">
                </div>
                <h4 class="product-title">Product 2</h4>
                <div class="product-button">
                  <a href="#" class="btn">Configure</a>
                </div>
              </div>
            </div>
          </div>
          
          <div class="nested-collection">
            <h3>Nested Collection 2</h3>
            <div class="product-cards">
              <div class="product-card">
                <div class="product-image">
                  <img src="https://via.placeholder.com/300x200" alt="Product 3">
                </div>
                <h4 class="product-title">Product 3</h4>
                <div class="product-button">
                  <a href="#" class="btn">Configure</a>
                </div>
              </div>
              <div class="product-card">
                <div class="product-image">
                  <img src="https://via.placeholder.com/300x200" alt="Product 4">
                </div>
                <h4 class="product-title">Product 4</h4>
                <div class="product-button">
                  <a href="#" class="btn">Configure</a>
                </div>
              </div>
            </div>
          </div>
        `;
      }
    }
    
    // Start loading
    loadNestedCollections();
  });
</script>

{% schema %}
  {
    "name": "Configurator Landing",
    "settings": [],
    "presets": [
      {
        "name": "Configurator Landing"
      }
    ]
  }
{% endschema %}